#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var dir = path.join(path.dirname(fs.realpathSync(__filename)), '../');

// Return the module for webpack
if(require.main !== module){
	var loader = {
		"test": /\.imba$/,
		"loader": dir + "loader.js"
	}

	var webpack = require(path.join(require.main.filename, '../..'));
	var WebpackOptionsDefaulter = webpack.WebpackOptionsDefaulter;
	var options = {};
	var defaulter = new WebpackOptionsDefaulter;
	defaulter.process(options);

	var conf = {
		module: {
			loaders: [loader]
		},
		resolve: {
			extensions: options.resolve.extensions,
			alias: {
				imba$: dir + "/src/imba/index.imba",
				imba: dir
			}
		}
	}

	function mergeConfig(obj){
		var m = (obj.module = obj.module || {loaders: []})
		var r = (obj.resolve = obj.resolve || {});
		// TODO merge instead of overriding module/resolve

		var loaders = m.loaders || m.rules;

		if (loaders) {
			// add the imba loader
			var l = null;
			loaders.forEach(function(loader){
				if(String(loader.test) == '/\\.imba/'){
					l = loader;
					l.loader = loader.loader; // update path
				}
			});
			// push our loader of we have one
			if (!l) loaders.unshift(loader)
		} else {
			m.loaders = [loader];
		}

		if (!r.extensions) {
			r.extensions = conf.resolve.extensions.slice(0)
		}
		r.extensions.splice(1,0,'.imba')

		if (!obj.target){
			r.extensions.splice(1,0,'.web.imba')
		} else if (obj.target) {
			r.extensions.splice(1,0,'.'+obj.target+'.imba')
		}

		// Set correct alias
		r.alias = r.alias || {}
		r.alias.imba$ = dir + "src/imba/index.imba"
		r.alias.imba = dir

		return obj;
	}

	// check for existing config
	var cfgPath = process.env.IMBAPACK_BASECONF;
	if (cfgPath){
		var baseconf = require(cfgPath);
		if (baseconf instanceof Array){
			baseconf.forEach(function(v){ mergeConfig(v); })
		} else {
			mergeConfig(baseconf);
		}
		module.exports = baseconf;
	} else {
		module.exports = conf;	
	}
	return;
}



var cp = require('child_process');
var args = process.argv.slice(2);
var env = Object.assign({}, process.env);
var cwd = process.cwd();

var cfgIdx = args.indexOf('--config') + 1;
var cfgPath = cfgIdx > 0 ? args[cfgIdx] : 'webpack.config.js';
var cfg = path.resolve(cwd,cfgPath);

var webpackBin = 'webpack';
var imbapackBin = dir + 'bin/imbapack';

// console.log('arguments',args,__dirname,process.cwd(),cfgPath,cfg);
// TODO drop default config if input/output is declared in process args

if (fs.existsSync(cfg)){
	env.IMBAPACK_BASECONF = cfg;
}

// possibly use the local imbapack instead?
cp.exec('npm bin', function(e,stdout,stderr){
	var binDir = stdout.split('\n')[0];

	// if there is a local installation of imbapack
	// make sure it is the file generating the config
	if(fs.existsSync(binDir + '/imbapack')){
		imbapackBin = binDir + '/imbapack';
	}

	if (cfgIdx){
		args[cfgIdx] = imbapackBin
	} else {
		args.push("--config");
		args.push(imbapackBin);
	}

	if(fs.existsSync(binDir + '/webpack')){
		webpackBin = binDir + '/webpack';
	}

	cp.exec('which '+webpackBin, function(e,stdout,stderr){
		if (stdout.length == 0) {
			process.stdout.write("Webpack need to be installed:\n");
			process.stdout.write("\tnpm install -g webpack");
			process.exit(0);
		}

		var packer = cp.spawn(webpackBin, args, { env: env });
		packer.stderr.pipe(process.stderr);
		packer.stdout.pipe(process.stdout);
	});
});

