#!/usr/bin/env node

var path = require('path');
var fs = require('fs');
var dir = path.join(path.dirname(fs.realpathSync(__filename)), '../');

// Return the module for webpack
if(require.main !== module){
	var loader = {
		"test": /\.imba$/,
		"loader": dir + "loader.js"
	}

	var conf = {
		module: {
			loaders: [loader]
		},
		resolve: {
			extensions: ["", ".imba", ".webpack.js", ".web.js", ".js",".css"],
			alias: {
				imba$: dir + "/src/imba/index.imba",
				imba: dir
			}
		}
	}

	function mergeConfig(obj){
		var m = (obj.module = obj.module || {loaders: []})
		var r = (obj.resolve = obj.resolve || {})
		// TODO merge instead of overriding module/resolve

		if(m.loaders) {
			// add the imba loader
			var l = null;
			m.loaders.forEach(function(loader){
				if(String(loader.test) == '/\\.imba/'){
					l = loader;
					l.loader = loader.loader; // update path
				}
			});
			// push our loader of we have one
			if(!l) m.loaders.unshift(loader)
		} else {
			m.loaders = [loader];
		}

		if(r.extensions){
			r.extensions.splice(1,0,'.imba')
		} else {
			r.extensions = conf.resolve.extensions.slice(0)
		}

		if(!obj.target){
			r.extensions.splice(1,0,'.web.imba')
		} else if (obj.target) {
			r.extensions.splice(1,0,'.'+obj.target+'.imba')
		}

		// Set correct alias
		r.alias = r.alias || {}
		r.alias.imba$ = dir + "src/imba/index.imba"
		r.alias.imba = dir

		return obj;
	}

	// check for existing config
	var idx = process.argv.indexOf('--baseconf') + 1;
	if(idx){
		// should run the file
		var cfgPath = process.argv[idx];
		var baseconf = require(cfgPath);

		if(baseconf instanceof Array){
			baseconf.forEach(function(v){ mergeConfig(v); })
		} else {
			mergeConfig(baseconf);
		}

		module.exports = baseconf;
	} else {
		module.exports = conf;	
	}
	return;
}

var cp = require('child_process');
var args = process.argv.slice(2);
var cwd = process.cwd();

var cfgIdx = args.indexOf('--config') + 1;
var cfgPath = cfgIdx > 0 ? args[cfgIdx] : 'webpack.config.js';
var cfg = path.resolve(cwd,cfgPath);

// console.log('arguments',args,__dirname,process.cwd(),cfgPath,cfg);
// TODO drop default config if input/output is declared in process args

if(fs.existsSync(cfg)){
	if(cfgIdx){
		args[cfgIdx] = dir + 'bin/imbapack'
	} else {
		args.push("--config " + dir + 'bin/imbapack');
	}
	args.push("--baseconf " + cfg);

} else {
	args.push("--config " + dir + 'bin/imbapack');
}



cp.exec('which webpack',function(e,stdout,stderr){

	if(stdout.length == 0){
		process.stdout.write("Webpack need to be installed:\n");
		process.stdout.write("\tnpm install -g webpack");
		process.exit(0);
	}

	var packer = cp.exec('webpack ' + args.join(' '));
	packer.stderr.pipe(process.stderr);
	packer.stdout.pipe(process.stdout);
	
});